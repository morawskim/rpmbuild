Index: par2cmdline-0.4/reedsolomon.cpp
===================================================================
--- par2cmdline-0.4.orig/reedsolomon.cpp
+++ par2cmdline-0.4/reedsolomon.cpp
@@ -50,8 +50,9 @@ u32 gcd(u32 a, u32 b)
     return 0;
   }
 }
 
+template <>
 bool ReedSolomon<Galois8>::SetInput(const vector<bool> &present)
 {
   inputcount = (u32)present.size();
 
@@ -79,8 +80,9 @@ bool ReedSolomon<Galois8>::SetInput(cons
 
   return true;
 }
 
+template <>
 bool ReedSolomon<Galois8>::SetInput(u32 count)
 {
   inputcount = count;
 
@@ -100,8 +102,9 @@ bool ReedSolomon<Galois8>::SetInput(u32
 
   return true;
 }
 
+template <>
 bool ReedSolomon<Galois8>::Process(size_t size, u32 inputindex, const void *inputbuffer, u32 outputindex, void *outputbuffer)
 {
   // Look up the appropriate element in the RS matrix
   Galois8 factor = leftmatrix[outputindex * (datapresent + datamissing) + inputindex];
@@ -188,8 +191,9 @@ bool ReedSolomon<Galois8>::Process(size_
 
 
 // Set which of the source files are present and which are missing
 // and compute the base values to use for the vandermonde matrix.
+template <>
 bool ReedSolomon<Galois16>::SetInput(const vector<bool> &present)
 {
   inputcount = (u32)present.size();
 
@@ -232,8 +236,9 @@ bool ReedSolomon<Galois16>::SetInput(con
 }
 
 // Record that the specified number of source files are all present
 // and compute the base values to use for the vandermonde matrix.
+template <>
 bool ReedSolomon<Galois16>::SetInput(u32 count)
 {
   inputcount = count;
 
@@ -266,8 +271,9 @@ bool ReedSolomon<Galois16>::SetInput(u32
 
   return true;
 }
 
+template <>
 bool ReedSolomon<Galois16>::Process(size_t size, u32 inputindex, const void *inputbuffer, u32 outputindex, void *outputbuffer)
 {
   // Look up the appropriate element in the RS matrix
 
Index: par2cmdline-0.4/md5.h
===================================================================
--- par2cmdline-0.4.orig/md5.h
+++ par2cmdline-0.4/md5.h
@@ -30,11 +30,14 @@
 //
 //  MD5Hash hash;
 //  context.Final(hash);
 
-
-
-// MD5 Hash value
+#ifdef WIN32
+#pragma pack(push, 1)
+#define PACKED
+#else
+#define PACKED __attribute__ ((packed))
+#endif
 
 class MD5Hash
 {
 public:
@@ -59,9 +62,9 @@ public:
   MD5Hash& operator=(const MD5Hash &other);
 
 public:
   u8 hash[16]; // 16 byte MD5 Hash value
-};
+} PACKED;
 
 // Intermediate computation state
 
 class MD5State
